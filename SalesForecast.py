# -*- coding: utf-8 -*-
"""SalesForecast.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aDQ2R1DdfhuUyXxRtSurAD98KQvKlJf8
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install -Uq upgini catboost

from os.path import exists
import pandas as pd

df_path = "train.csv.zip" if exists("train.csv.zip") else "https://github.com/upgini/upgini/raw/main/notebooks/train.csv.zip" #reading csv file
df = pd.read_csv(df_path) #putting data of csv into a data frame
df = df.sample(n=19000, random_state = 0) # choosing a random state of 19000 points
df["item"] = df["item"].astype(str) #converting it to string type
df["store"] = df["store"].astype(str)

df["date"] = pd.to_datetime(df["date"])
df.sort_values("date", inplace = True)
df.reset_index(inplace=True, drop = True)
df.head()

train = df[df["date"] < "2017-01-01"] #training dataframe of years before 2017
test = df[df["date"] >= "2017-01-01"] #testing dataframe of years after 2017

train_features = train.drop(columns=["sales"]) #every column except sales
train_target = train["sales"]
test_features = test.drop(columns=["sales"])
test_target = test["sales"]

#enrich features
from upgini import FeaturesEnricher, SearchKey
from upgini.metadata import CVType
enricher = FeaturesEnricher(
    search_keys = {
        "date": SearchKey.DATE,
    },
    cv = CVType.time_series
)
enricher.fit(train_features, train_target, eval_set=[(test_features, test_target)])

from catboost import CatBoostRegressor
from catboost.utils import eval_metric
model = CatBoostRegressor(verbose=False, allow_writing_files=False, random_state=0) 
enricher.calculate_metrics(
    train_features, train_target,
    eval_set=[(test_features, test_target)],
    estimator=model,
    scoring = "mean_absolute_percentage_error"
)

enriched_train_features = enricher.transform(train_features, keep_input=True)
enriched_test_features = enricher.transform(test_features, keep_input=True)
enriched_train_features.head()

model.fit(enriched_train_features, train_target)
enriched_pred = model.predict(enriched_test_features)
eval_metric(test_target.values, enriched_pred, "SMAPE")